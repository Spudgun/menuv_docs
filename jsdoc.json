[
  {
    "comment": "/**\r\n * MenuV library\r\n * @name MenuV\r\n * @alias MenuV\r\n * @class MenuV\r\n * @namespace MenuV\r\n */",
    "meta": {
      "filename": "menuv.js",
      "lineno": 57,
      "columnno": 0,
      "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
      "code": {}
    },
    "description": "MenuV library",
    "name": "MenuV",
    "alias": "MenuV",
    "kind": "namespace",
    "longname": "MenuV",
    "scope": "global",
    "$longname": "MenuV",
    "$kind": "namespace",
    "$docmaLink": "api/#MenuV",
    "$members": [
      {
        "comment": "/**\r\n     * <strong>Type:</strong> `function`\r\n     * \r\n     * Close a menu\r\n     * @memberof MenuV\r\n     * @access public\r\n     * @param {MenuV} MenuV \r\n     * @param {Menu|string} menu Menu or Universally Unique Identifier (UUID)\r\n     * @param {function} [callback] Trigger callback when function has been executed\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\n     * \r\n     * MenuV:CloseMenu(menu)\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\n     * \r\n     * MenuV:CloseMenu(menu, function()\r\n     *    print('Menu closed :(')\r\n     * end)\r\n     */",
        "meta": {
          "range": [
            8487,
            8522
          ],
          "filename": "menuv.js",
          "lineno": 226,
          "columnno": 4,
          "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
          "code": {
            "id": "astnode100000050",
            "name": "MenuV#CloseMenu",
            "type": "MethodDefinition",
            "paramnames": [
              "MenuV",
              "menu",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "<strong>Type:</strong> `function`\r\rClose a menu",
        "memberof": "MenuV",
        "access": "public",
        "params": [
          {
            "type": {
              "names": [
                "MenuV"
              ]
            },
            "name": "MenuV"
          },
          {
            "type": {
              "names": [
                "Menu",
                "string"
              ]
            },
            "description": "Menu or Universally Unique Identifier (UUID)",
            "name": "menu"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Trigger callback when function has been executed",
            "name": "callback"
          }
        ],
        "examples": [
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\rMenuV:CloseMenu(menu)",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\rMenuV:CloseMenu(menu, function()\r   print('Menu closed :(')\rend)"
        ],
        "name": "CloseMenu",
        "longname": "MenuV#CloseMenu",
        "kind": "function",
        "scope": "instance",
        "$longname": "MenuV#CloseMenu",
        "$kind": "method",
        "$docmaLink": "api/#MenuV#CloseMenu"
      },
      {
        "comment": "/**\r\n     * <strong>Type:</strong> `function`\r\n     * \r\n     * Create a `MenuV` menu\r\n     * @memberof MenuV\r\n     * @access public\r\n     * @param {MenuV} MenuV\r\n     * @param {string|boolean} [title='MenuV']\r\n     *        Title that appears on the big banner.\r\n     * @param {string} [subtitle='']\r\n     *        Subtitle that appears in capital letters in a small black bar.\r\n     * @param {string} [position='topleft']\r\n     *        Menu position on screen\r\n     *        \r\n     *        \r\n     *        <strong>options:</strong> \r\n     *        \r\n     *        `topleft` | `topcenter` | `topright` | `centerleft` | `center` | `centerright` | `bottomleft` | `bottomcenter` | `bottomright`\r\n     * @param {number} [r=0]\r\n     *        Primary color <strong>RGB</strong> red channel [0-255]\r\n     * @param {number} [g=0]\r\n     *        Primary color <strong>RGB</strong> green channel [0-255]\r\n     * @param {number} [b=255]\r\n     *        Primary color <strong>RGB</strong> blue channel [0-255]\r\n     * @param {string} [size='size-110']\r\n     *        Menu size in %\r\n     *        \r\n     *        \r\n     *        <strong>options:</strong> \r\n     *        \r\n     *        `size-100` | `size-110` | `size-125` | `size-150` | `size-175` | `size-200`\r\n     * @param {string} [texture='default']\r\n     *        Texture name for the banner image\r\n     * @param {string} [dictionary='menuv']\r\n     *        Texture dictionary name for the banner image\r\n     * @param {string} [namespace='unknown']\r\n     *        Namespace is required to set keybinds, make sure given namespace is unique for every menu.\r\n     * @param {string} [theme='default']\r\n     *        Change the look of the menu, available options: `default` and `native`\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0)\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace')\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\n     * @returns {Menu}\r\n     */",
        "meta": {
          "range": [
            5370,
            5471
          ],
          "filename": "menuv.js",
          "lineno": 150,
          "columnno": 4,
          "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
          "code": {
            "id": "astnode100000013",
            "name": "MenuV#CreateMenu",
            "type": "MethodDefinition",
            "paramnames": [
              "MenuV",
              "title",
              "subtitle",
              "position",
              "r",
              "g",
              "b",
              "size",
              "texture",
              "dictionary",
              "namespace",
              "theme"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "<strong>Type:</strong> `function`\r\rCreate a `MenuV` menu",
        "memberof": "MenuV",
        "access": "public",
        "params": [
          {
            "type": {
              "names": [
                "MenuV"
              ]
            },
            "name": "MenuV"
          },
          {
            "type": {
              "names": [
                "string",
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": "'MenuV'",
            "description": "Title that appears on the big banner.",
            "name": "title"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "''",
            "description": "Subtitle that appears in capital letters in a small black bar.",
            "name": "subtitle"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'topleft'",
            "description": "Menu position on screen\r       \r       \r       <strong>options:</strong> \r       \r       `topleft` | `topcenter` | `topright` | `centerleft` | `center` | `centerright` | `bottomleft` | `bottomcenter` | `bottomright`",
            "name": "position"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Primary color <strong>RGB</strong> red channel [0-255]",
            "name": "r"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Primary color <strong>RGB</strong> green channel [0-255]",
            "name": "g"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 255,
            "description": "Primary color <strong>RGB</strong> blue channel [0-255]",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'size-110'",
            "description": "Menu size in %\r       \r       \r       <strong>options:</strong> \r       \r       `size-100` | `size-110` | `size-125` | `size-150` | `size-175` | `size-200`",
            "name": "size"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'default'",
            "description": "Texture name for the banner image",
            "name": "texture"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'menuv'",
            "description": "Texture dictionary name for the banner image",
            "name": "dictionary"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'unknown'",
            "description": "Namespace is required to set keybinds, make sure given namespace is unique for every menu.",
            "name": "namespace"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'default'",
            "description": "Change the look of the menu, available options: `default` and `native`",
            "name": "theme"
          }
        ],
        "examples": [
          "local menu = MenuV:CreateMenu('MenuV')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0)",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace')",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')"
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Menu"
              ]
            }
          }
        ],
        "name": "CreateMenu",
        "longname": "MenuV#CreateMenu",
        "kind": "function",
        "scope": "instance",
        "$longname": "MenuV#CreateMenu",
        "$kind": "method",
        "$docmaLink": "api/#MenuV#CreateMenu"
      },
      {
        "comment": "/**\r\n     * <strong>Type:</strong> `function`\r\n     * \r\n     * Returns created menu matching `UUID`\r\n     * @memberof MenuV\r\n     * @access public\r\n     * @param {MenuV} MenuV\r\n     * @param {string} uuid Universally Unique Identifier (UUID)\r\n     * @example\r\n     * local menu = MenuV:GetMenu('00000000-0000-0000-0000-000000000000')\r\n     * @returns {Menu|null} Returns matching menu or `nil`\r\n     */",
        "meta": {
          "range": [
            6796,
            6819
          ],
          "filename": "menuv.js",
          "lineno": 182,
          "columnno": 4,
          "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
          "code": {
            "id": "astnode100000037",
            "name": "MenuV#GetMenu",
            "type": "MethodDefinition",
            "paramnames": [
              "MenuV",
              "uuid"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "<strong>Type:</strong> `function`\r\rReturns created menu matching `UUID`",
        "memberof": "MenuV",
        "access": "public",
        "params": [
          {
            "type": {
              "names": [
                "MenuV"
              ]
            },
            "name": "MenuV"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Universally Unique Identifier (UUID)",
            "name": "uuid"
          }
        ],
        "examples": [
          "local menu = MenuV:GetMenu('00000000-0000-0000-0000-000000000000')"
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Menu",
                "null"
              ]
            },
            "description": "Returns matching menu or `nil`"
          }
        ],
        "name": "GetMenu",
        "longname": "MenuV#GetMenu",
        "kind": "function",
        "scope": "instance",
        "$longname": "MenuV#GetMenu",
        "$kind": "method",
        "$docmaLink": "api/#MenuV#GetMenu"
      },
      {
        "comment": "/**\r\n     * <strong>Type:</strong> `function`\r\n     * \r\n     * Create a new menu from properties of this one (without items and events)\r\n     * @memberof MenuV\r\n     * @access public\r\n     * @param {MenuV} MenuV\r\n     * @param {Menu} menu Menu to take properties from\r\n     * @param {table} overrides A table with key values to override, see {@link #Menu~options|Menu options}\r\n     * @param {string} namespace Unique namespace, see {@link #Menu.Namespace|Menu.Namespace}\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\n     * \r\n     * local menu2 = MenuV:InheritMenu(menu, { title = 'Menu V2', subtitle = 'Welcome to MenuV2 :D', theme = 'default' })\r\n     * @returns {Menu} - New menu with properties of this one\r\n     */",
        "meta": {
          "range": [
            6330,
            6379
          ],
          "filename": "menuv.js",
          "lineno": 168,
          "columnno": 4,
          "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
          "code": {
            "id": "astnode100000029",
            "name": "MenuV#InheritMenu",
            "type": "MethodDefinition",
            "paramnames": [
              "MenuV",
              "menu",
              "overrides",
              "namespace"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "<strong>Type:</strong> `function`\r\rCreate a new menu from properties of this one (without items and events)",
        "memberof": "MenuV",
        "access": "public",
        "params": [
          {
            "type": {
              "names": [
                "MenuV"
              ]
            },
            "name": "MenuV"
          },
          {
            "type": {
              "names": [
                "Menu"
              ]
            },
            "description": "Menu to take properties from",
            "name": "menu"
          },
          {
            "type": {
              "names": [
                "table"
              ]
            },
            "description": "A table with key values to override, see {@link #Menu~options|Menu options}",
            "name": "overrides"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Unique namespace, see {@link #Menu.Namespace|Menu.Namespace}",
            "name": "namespace"
          }
        ],
        "examples": [
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\rlocal menu2 = MenuV:InheritMenu(menu, { title = 'Menu V2', subtitle = 'Welcome to MenuV2 :D', theme = 'default' })"
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Menu"
              ]
            },
            "description": "- New menu with properties of this one"
          }
        ],
        "name": "InheritMenu",
        "longname": "MenuV#InheritMenu",
        "kind": "function",
        "scope": "instance",
        "$longname": "MenuV#InheritMenu",
        "$kind": "method",
        "$docmaLink": "api/#MenuV#InheritMenu"
      },
      {
        "comment": "/**\r\n     * <strong>Type:</strong> `function`\r\n     * \r\n     * Checks if namespace is available\r\n     * @memberof MenuV\r\n     * @access public\r\n     * @param {string} namespace Namespace, see {@link #Menu.Namespace|Menu.Namespace}\r\n     * @example\r\n     * local available = MenuV:IsNamespaceAvailable('example_namespace')\r\n     * @returns {boolean} Return `true` if given namespace is available, otherwise `false`\r\n     */",
        "meta": {
          "range": [
            9699,
            9733
          ],
          "filename": "menuv.js",
          "lineno": 254,
          "columnno": 4,
          "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
          "code": {
            "id": "astnode100000067",
            "name": "MenuV#IsNamespaceAvailable",
            "type": "MethodDefinition",
            "paramnames": [
              "namespace"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "<strong>Type:</strong> `function`\r\rChecks if namespace is available",
        "memberof": "MenuV",
        "access": "public",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Namespace, see {@link #Menu.Namespace|Menu.Namespace}",
            "name": "namespace"
          }
        ],
        "examples": [
          "local available = MenuV:IsNamespaceAvailable('example_namespace')"
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Return `true` if given namespace is available, otherwise `false`"
          }
        ],
        "name": "IsNamespaceAvailable",
        "longname": "MenuV#IsNamespaceAvailable",
        "kind": "function",
        "scope": "instance",
        "$longname": "MenuV#IsNamespaceAvailable",
        "$kind": "method",
        "$docmaLink": "api/#MenuV#IsNamespaceAvailable"
      },
      {
        "comment": "/**\r\n     * <strong>Type:</strong> `function`\r\n     * \r\n     * Open a menu\r\n     * @memberof MenuV\r\n     * @access public\r\n     * @param {MenuV} MenuV \r\n     * @param {Menu|string} menu Menu or Universally Unique Identifier (UUID)\r\n     * @param {function} [callback] Trigger callback when function has been executed\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\n     * \r\n     * MenuV:OpenMenu(menu)\r\n     * @example\r\n     * local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\n     * \r\n     * MenuV:OpenMenu(menu, function()\r\n     *    print('Menu is now open :D')\r\n     * end)\r\n     */",
        "meta": {
          "range": [
            7637,
            7671
          ],
          "filename": "menuv.js",
          "lineno": 204,
          "columnno": 4,
          "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
          "code": {
            "id": "astnode100000043",
            "name": "MenuV#OpenMenu",
            "type": "MethodDefinition",
            "paramnames": [
              "MenuV",
              "menu",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "<strong>Type:</strong> `function`\r\rOpen a menu",
        "memberof": "MenuV",
        "access": "public",
        "params": [
          {
            "type": {
              "names": [
                "MenuV"
              ]
            },
            "name": "MenuV"
          },
          {
            "type": {
              "names": [
                "Menu",
                "string"
              ]
            },
            "description": "Menu or Universally Unique Identifier (UUID)",
            "name": "menu"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Trigger callback when function has been executed",
            "name": "callback"
          }
        ],
        "examples": [
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\rMenuV:OpenMenu(menu)",
          "local menu = MenuV:CreateMenu('MenuV', 'Welcome to MenuV', 'topleft', 255, 0, 0, 'size-125', 'example', 'menuv', 'example_namespace', 'native')\r\rMenuV:OpenMenu(menu, function()\r   print('Menu is now open :D')\rend)"
        ],
        "name": "OpenMenu",
        "longname": "MenuV#OpenMenu",
        "kind": "function",
        "scope": "instance",
        "$longname": "MenuV#OpenMenu",
        "$kind": "method",
        "$docmaLink": "api/#MenuV#OpenMenu"
      }
    ]
  },
  {
    "comment": "/**\r\n * CreateMenu options\r\n * \r\n * @access public\r\n * @memberof Menu\r\n * @typedef {object} Menu~options\r\n * \r\n * @param {string} [options.namespace=unknown]\r\n *        Namespace is required to set keybinds, make sure given namespace is unique for every menu.\r\n * @param {boolean|string} [options.title=MenuV]\r\n *        Title that appears on the big banner.\r\n * @param {string} [options.subtitle=\"\"]\r\n *        Subtitle that appears in capital letters in a small black bar.\r\n * @param {string} [options.position=\"topleft\"]\r\n *        Menu position on screen\r\n *         \r\n *         \r\n *        <strong>options:</strong> \r\n * \r\n *        `topleft` | `topcenter` | `topright` | `centerleft` | `center` | `centerright` | `bottomleft` | `bottomcenter` | `bottomright`\r\n * @param {number} [options.r=0]\r\n *        Primary color `RGB` red channel [0-255]\r\n * @param {number} [options.g=0]\r\n *        Primary color `RGB` green channel [0-255]\r\n * @param {number} [options.b=255]\r\n *        Primary color `RGB` blue channel [0-255]\r\n * @param {string} [options.size=size-110]\r\n *        Menu size in %\r\n * \r\n * \r\n *        <strong>options:</strong> \r\n * \r\n *        `size-100` | `size-110` | `size-125` | `size-150` | `size-175` | `size-200`\r\n * @param {string} [options.dictionary=menuv]\r\n *        Texture dictionary name for the banner image\r\n * @param {string} [options.texture=default]\r\n *        Texture name for the banner image\r\n * @param {table} [options.events={}]\r\n *        Custom events to add\r\n * @param {function} [options.validate=nil]\r\n *        Custom {@link #Menu.Validate|Menu.Validate} function\r\n * @param {function} [options.newIndex=nil]\r\n *             Custom {@link #Menu.NewIndex|Menu.NewIndex} function\r\n */",
    "meta": {
      "filename": "menuv.js",
      "lineno": 12,
      "columnno": 0,
      "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
      "code": {}
    },
    "description": "CreateMenu options",
    "access": "public",
    "memberof": "Menu",
    "kind": "typedef",
    "name": "options",
    "type": {
      "names": [
        "object"
      ]
    },
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "unknown",
        "description": "Namespace is required to set keybinds, make sure given namespace is unique for every menu.",
        "name": "options.namespace"
      },
      {
        "type": {
          "names": [
            "boolean",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "MenuV",
        "description": "Title that appears on the big banner.",
        "name": "options.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "\"\"",
        "description": "Subtitle that appears in capital letters in a small black bar.",
        "name": "options.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "\"topleft\"",
        "description": "Menu position on screen\r        \r        \r       <strong>options:</strong> \r\r       `topleft` | `topcenter` | `topright` | `centerleft` | `center` | `centerright` | `bottomleft` | `bottomcenter` | `bottomright`",
        "name": "options.position"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Primary color `RGB` red channel [0-255]",
        "name": "options.r"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Primary color `RGB` green channel [0-255]",
        "name": "options.g"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 255,
        "description": "Primary color `RGB` blue channel [0-255]",
        "name": "options.b"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "size-110",
        "description": "Menu size in %\r\r\r       <strong>options:</strong> \r\r       `size-100` | `size-110` | `size-125` | `size-150` | `size-175` | `size-200`",
        "name": "options.size"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "menuv",
        "description": "Texture dictionary name for the banner image",
        "name": "options.dictionary"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "default",
        "description": "Texture name for the banner image",
        "name": "options.texture"
      },
      {
        "type": {
          "names": [
            "table"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Custom events to add",
        "name": "options.events"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "nil",
        "description": "Custom {@link #Menu.Validate|Menu.Validate} function",
        "name": "options.validate"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "nil",
        "description": "Custom {@link #Menu.NewIndex|Menu.NewIndex} function",
        "name": "options.newIndex"
      }
    ],
    "longname": "Menu~options",
    "scope": "inner",
    "$longname": "Menu~options",
    "$kind": "typedef",
    "$docmaLink": "api/#Menu~options"
  },
  {
    "comment": "/**\r\n * Object\r\n * @typedef {object} table\r\n */",
    "meta": {
      "filename": "menuv.js",
      "lineno": 3,
      "columnno": 0,
      "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
      "code": {}
    },
    "description": "Object",
    "kind": "typedef",
    "name": "table",
    "type": {
      "names": [
        "object"
      ]
    },
    "longname": "table",
    "scope": "global",
    "$longname": "table",
    "$kind": "typedef",
    "$docmaLink": "api/#table"
  },
  {
    "comment": "/**\r\n * List of threads\r\n * @typedef {number[]} threads\r\n */",
    "meta": {
      "filename": "menuv.js",
      "lineno": 7,
      "columnno": 0,
      "path": "D:\\Downloads\\menuv_docs-master\\menuv_docs\\src",
      "code": {}
    },
    "description": "List of threads",
    "kind": "typedef",
    "name": "threads",
    "type": {
      "names": [
        "Array.<number>"
      ]
    },
    "longname": "threads",
    "scope": "global",
    "$longname": "threads",
    "$kind": "typedef",
    "$docmaLink": "api/#threads"
  }
]